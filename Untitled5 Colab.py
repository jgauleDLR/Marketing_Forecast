# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E4WcmYeNeyHW7LJkafppEHme1CxGYoOb
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

st.set_page_config(page_title="Pipeline Predict Dashboard", layout="wide")
st.title("ðŸ“ˆ Pipeline Predict - Forecasting Tool")

# --- File Upload ---
uploaded_file = st.file_uploader("Upload your pipeline data (CSV or Excel)", type=["csv", "xlsx"])

if uploaded_file:
    # Read file
    if uploaded_file.name.endswith(".csv"):
        df = pd.read_csv(uploaded_file)
    else:
        df = pd.read_excel(uploaded_file)

    # Clean and prep
    df = df.dropna(subset=['GAAP', 'Forecast'])
    df['Forecast'] = df['Forecast'].str.title()

    st.sidebar.header("Adjust Forecast Conversion Rates")
    commit_rate = st.sidebar.slider("Commit Conversion %", 0, 100, 80) / 100
    upside_rate = st.sidebar.slider("Upside Conversion %", 0, 100, 50) / 100
    pipeline_rate = st.sidebar.slider("Pipeline Conversion %", 0, 100, 30) / 100

    rate_map = {
        "Commit": commit_rate,
        "Upside": upside_rate,
        "Pipeline": pipeline_rate
    }

    df['Conversion Rate'] = df['Forecast'].map(rate_map).fillna(0)
    df['Predicted Value'] = df['GAAP'] * df['Conversion Rate']

    # Filters
    st.sidebar.header("Filter Data")
    segmentation_options = df['Coverage Segmentation'].dropna().unique()
    cro_line_options = df['1st Line from CRO'].dropna().unique()
    quarter_options = df['Close Quarter'].dropna().unique()

    selected_segmentation = st.sidebar.multiselect("Coverage Segmentation", options=segmentation_options, default=list(segmentation_options))
    selected_cro = st.sidebar.multiselect("1st Line from CRO", options=cro_line_options, default=list(cro_line_options))
    selected_quarters = st.sidebar.multiselect("Close Quarter", options=quarter_options, default=list(quarter_options))

    filtered_df = df[
        (df['Coverage Segmentation'].isin(selected_segmentation)) &
        (df['1st Line from CRO'].isin(selected_cro)) &
        (df['Close Quarter'].isin(selected_quarters))
    ]

    total_pipeline = filtered_df['GAAP'].sum()
    predicted_total = filtered_df['Predicted Value'].sum()
    total_opps = len(filtered_df)

    col1, col2, col3 = st.columns(3)
    col1.metric("Total Opportunities", f"{total_opps}")
    col2.metric("Total Pipeline Value", f"${total_pipeline:,.0f}")
    col3.metric("Predicted Closed Value", f"${predicted_total:,.0f}")

    st.subheader("ðŸ“Š Forecast Category Breakdown")
    forecast_group = filtered_df.groupby('Forecast').agg({
        'GAAP': 'sum',
        'Predicted Value': 'sum'
    }).reset_index()

    fig, ax = plt.subplots()
    ax.bar(forecast_group['Forecast'], forecast_group['GAAP'], label='GAAP')
    ax.bar(forecast_group['Forecast'], forecast_group['Predicted Value'],
           label='Predicted', alpha=0.7)
    ax.set_ylabel("Value ($)")
    ax.set_title("GAAP vs. Predicted Value by Forecast")
    ax.legend()
    st.pyplot(fig)

    # Additional visuals
    st.subheader("ðŸ“Œ Predicted Value by Segmentation")
    seg_group = filtered_df.groupby('Coverage Segmentation')['Predicted Value'].sum().sort_values(ascending=False)
    st.bar_chart(seg_group)

    st.subheader("ðŸ“Œ Predicted Value by 1st Line CRO")
    cro_group = filtered_df.groupby('1st Line from CRO')['Predicted Value'].sum().sort_values(ascending=False)
    st.bar_chart(cro_group)

    st.subheader("ðŸ“† Predicted Value by Close Quarter")
    quarter_group = filtered_df.groupby('Close Quarter')['Predicted Value'].sum().sort_values()
    st.line_chart(quarter_group)

    st.subheader("ðŸ“‹ Filtered Opportunity Table")
    st.dataframe(filtered_df[['Account Name', 'Forecast', 'GAAP', 'Conversion Rate', 'Predicted Value', 'Coverage Segmentation', '1st Line from CRO', 'Close Quarter']])

    st.subheader("ðŸ“Ž Full Dataset (Raw View)")
    st.dataframe(df)

else:
    st.info("ðŸ‘† Upload a pipeline file to begin.")